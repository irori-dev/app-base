name: Build & Deploy Application

# „Åì„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅØÁ∂ôÁ∂öÁöÑ„Éá„Éó„É≠„Ç§Â∞ÇÁî®
# „Ç§„É≥„Éï„É©„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÅØÂà•„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÔºàsetup-infrastructure.ymlÔºâ„ÅßÂÆüË°å

# Required GitHub Secrets:
# - AWS_ROLE_ARN: ARN of the IAM role for OIDC authentication
# - AWS_REGION: AWS region (e.g., ap-northeast-1)
# - AWS_ACCOUNT_ID: AWS account ID
# - ECR_REPOSITORY: ECR repository name (e.g., workshop-app/app-name)
# - SLACK_BOT_TOKEN: Slack bot token (optional)
# - SLACK_CHANNEL_ID: Slack channel ID (optional)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write     # OIDC „Çí‰Ωø„ÅÜ„Å™„ÇâÂøÖÈ†à
  contents: read

jobs:
  # „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ„Éì„É´„Éâ„ÉªÁ∂ôÁ∂öÁöÑ„Éá„Éó„É≠„Ç§
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # „ÉÜ„Çπ„Éà„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆÂÆüË°å„ÇíÂæÖ„Å§
      - name: Wait for test workflow
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: 'test'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Wait for docker-build workflow
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: 'docker-build'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPO:     ${{ secrets.ECR_REPOSITORY }}
          TAG:      ${{ github.sha }}
        run: |
          echo "üê≥ Building Docker image..."
          docker build -t $REGISTRY/$REPO:$TAG .
          docker build -t $REGISTRY/$REPO:latest .
          docker push   $REGISTRY/$REPO:$TAG
          docker push   $REGISTRY/$REPO:latest
          
          echo "IMAGE_URI=$REGISTRY/$REPO:$TAG" >> $GITHUB_ENV
          echo "‚úÖ Docker image pushed: $REGISTRY/$REPO:$TAG"

      # „Ç§„É≥„Éï„É©Â≠òÂú®Á¢∫Ë™ç
      - name: Check if infrastructure exists
        id: check-infra
        run: |
          echo "üîç Checking if infrastructure exists..."
          
          INFRA_STACK_NAME="${{ github.event.repository.name }}-prod-infra"
          
          if aws cloudformation describe-stacks --stack-name $INFRA_STACK_NAME >/dev/null 2>&1; then
            echo "‚úÖ Infrastructure stack exists: $INFRA_STACK_NAME"
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "infra-stack-name=$INFRA_STACK_NAME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Infrastructure stack not found: $INFRA_STACK_NAME"
            echo "Please run 'Setup Infrastructure (Manual Only)' workflow first"
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Infrastructure not found. Deployment will be skipped."
            echo "üìã Next steps:"
            echo "1. Run 'Setup Infrastructure (Manual Only)' workflow from Actions tab"
            echo "2. Update ECR_REPOSITORY secret if needed"
            echo "3. Push code again to trigger automatic deployment"
          fi

      # „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Éá„Éó„É≠„Ç§ÔºàÂàÜÈõ¢„Åï„Çå„Åü„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰ΩøÁî®Ôºâ
      - name: Deploy Application
        if: ${{ steps.check-infra.outputs.exists == 'true' }}
        run: |
          echo "üöÄ Deploying application with separated template..."
          
          aws cloudformation deploy \
            --template-file infra/apps/app-base/app-deploy.yaml \
            --stack-name ${{ github.event.repository.name }}-app \
            --parameter-overrides \
              AppName=${{ github.event.repository.name }} \
              ImageUri=$IMAGE_URI \
              InfraStackName=${{ steps.check-infra.outputs.infra-stack-name }} \
              DatabaseUrlArn=arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/${{ github.event.repository.name }}/prod/DATABASE_URL \
              CacheDatabaseUrlArn=arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/${{ github.event.repository.name }}/prod/CACHE_DATABASE_URL \
              QueueDatabaseUrlArn=arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/${{ github.event.repository.name }}/prod/QUEUE_DATABASE_URL \
              RailsMasterKeyArn=arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/${{ github.event.repository.name }}/prod/RAILS_MASTER_KEY \
            --capabilities CAPABILITY_IAM
          
          echo "‚úÖ Application deployment completed"

      - name: Wait for ECS service stability
        if: ${{ steps.check-infra.outputs.exists == 'true' }}
        run: |
          echo "‚è≥ Waiting for ECS service to be stable..."
          aws ecs wait services-stable \
            --cluster workshop-app-prod-cluster \
            --services ${{ github.event.repository.name }}-service
          
          echo "‚úÖ Service is now stable"
 
      # Slack notification
      - name: Notify Slack on success
        if: ${{ success() && steps.check-infra.outputs.exists == 'true' && env.SLACK_BOT_TOKEN != '' }}
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "ECR Push Success: ${{ github.repository }}"
            attachments:
              - color: "good"
                fields:
                  - title: "Image"
                    value: "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
                    short: true
                  - title: "Branch"
                    value: "${{ github.ref_name }}",
                    short: true

      - name: Notify Slack on failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "ECR Push Failed: ${{ github.repository }}"
            attachments:
              - color: "danger"
                fields:
                  - title: "Status"
                    value: "Failed ‚ùå"
                    short: true
                  - title: "Branch"
                    value: "${{ github.ref_name }}"
                    short: true
                  - title: "Details"
                    value: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow run>"