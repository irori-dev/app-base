class PasswordReset < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[PasswordReset, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def password_resettable_id: () -> Integer?

    def password_resettable_id=: (Integer?) -> Integer?

    def password_resettable_id?: () -> bool

    def password_resettable_id_changed?: () -> bool

    def password_resettable_id_change: () -> [ Integer?, Integer? ]

    def password_resettable_id_will_change!: () -> void

    def password_resettable_id_was: () -> Integer?

    def password_resettable_id_previously_changed?: () -> bool

    def password_resettable_id_previous_change: () -> Array[Integer?]?

    def password_resettable_id_previously_was: () -> Integer?

    def password_resettable_id_before_last_save: () -> Integer?

    def password_resettable_id_change_to_be_saved: () -> Array[Integer?]?

    def password_resettable_id_in_database: () -> Integer?

    def saved_change_to_password_resettable_id: () -> Array[Integer?]?

    def saved_change_to_password_resettable_id?: () -> bool

    def will_save_change_to_password_resettable_id?: () -> bool

    def restore_password_resettable_id!: () -> void

    def clear_password_resettable_id_change: () -> void

    def password_resettable_type: () -> String?

    def password_resettable_type=: (String?) -> String?

    def password_resettable_type?: () -> bool

    def password_resettable_type_changed?: () -> bool

    def password_resettable_type_change: () -> [ String?, String? ]

    def password_resettable_type_will_change!: () -> void

    def password_resettable_type_was: () -> String?

    def password_resettable_type_previously_changed?: () -> bool

    def password_resettable_type_previous_change: () -> Array[String?]?

    def password_resettable_type_previously_was: () -> String?

    def password_resettable_type_before_last_save: () -> String?

    def password_resettable_type_change_to_be_saved: () -> Array[String?]?

    def password_resettable_type_in_database: () -> String?

    def saved_change_to_password_resettable_type: () -> Array[String?]?

    def saved_change_to_password_resettable_type?: () -> bool

    def will_save_change_to_password_resettable_type?: () -> bool

    def restore_password_resettable_type!: () -> void

    def clear_password_resettable_type_change: () -> void

    def reset_digest: () -> String

    def reset_digest=: (String) -> String

    def reset_digest?: () -> bool

    def reset_digest_changed?: () -> bool

    def reset_digest_change: () -> [ String?, String? ]

    def reset_digest_will_change!: () -> void

    def reset_digest_was: () -> String?

    def reset_digest_previously_changed?: () -> bool

    def reset_digest_previous_change: () -> Array[String?]?

    def reset_digest_previously_was: () -> String?

    def reset_digest_before_last_save: () -> String?

    def reset_digest_change_to_be_saved: () -> Array[String?]?

    def reset_digest_in_database: () -> String?

    def saved_change_to_reset_digest: () -> Array[String?]?

    def saved_change_to_reset_digest?: () -> bool

    def will_save_change_to_reset_digest?: () -> bool

    def restore_reset_digest!: () -> void

    def clear_reset_digest_change: () -> void

    def reset_at: () -> ActiveSupport::TimeWithZone?

    def reset_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def reset_at?: () -> bool

    def reset_at_changed?: () -> bool

    def reset_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def reset_at_will_change!: () -> void

    def reset_at_was: () -> ActiveSupport::TimeWithZone?

    def reset_at_previously_changed?: () -> bool

    def reset_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def reset_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def reset_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def reset_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def reset_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_reset_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_reset_at?: () -> bool

    def will_save_change_to_reset_at?: () -> bool

    def restore_reset_at!: () -> void

    def clear_reset_at_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def password_resettable: () -> untyped
  def password_resettable=: (untyped?) -> untyped?
  def reload_password_resettable: () -> untyped?
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.not_expired: () -> ActiveRecord_Relation
  def self.not_reset: () -> ActiveRecord_Relation
  def self.detected_by: (untyped token) -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def not_expired: () -> ActiveRecord_Relation

    def not_reset: () -> ActiveRecord_Relation

    def detected_by: (untyped token) -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[PasswordReset, Integer]
    include Enumerable[PasswordReset]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[PasswordReset, Integer]
  end
end
